import { nanoid } from 'nanoid' // Импортирует функцию `nanoid` для генерации уникальных идентификаторов.
import { create } from 'zustand' // Импортирует функцию `create` из библиотеки Zustand для создания хранилища состояния.
import { List } from './types' // Импортирует интерфейс `List`, определяющий структуру объекта списка.

interface ListState {
	// Определяет интерфейс `ListState`, описывающий структуру состояния хранилища списков.
	lists: List[] // Массив объектов `List`, представляющих списки задач.
	addList: (boardId: string, title: string) => void // Функция для добавления нового списка. Принимает `boardId` (ID доски) и `title` (заголовок списка).
	deleteList: (id: string) => void // Функция для удаления списка по его `id`.
}

export const useListStore = create<ListState>(set => ({
	// Создает Zustand хранилище с типом `ListState`. Функция `set` используется для обновления состояния.
	lists: [], // Начальное состояние: пустой массив списков.
	addList: (
		boardId: string,
		title: string // Реализация функции `addList`.
	) =>
		set(state => ({
			// Функция `set` принимает функцию, которая получает текущее состояние (`state`).
			lists: [...state.lists, { id: nanoid(8), title, boardId }], // Возвращает новый объект состояния с обновленным массивом `lists`. Создается новый объект списка с уникальным `id`, заданным `title` и `boardId`, и добавляется в копию существующего массива.
		})),
	deleteList: (
		id: string // Реализация функции `deleteList`.
	) =>
		set(state => ({
			// Функция `set` принимает функцию, которая получает текущее состояние (`state`).
			lists: state.lists.filter(list => list.id !== id), // Возвращает новый объект состояния с обновленным массивом `lists`. Создается новый массив, содержащий только те списки, чей `id` не совпадает с переданным `id` для удаления.
		})),
	updateListTitle: (
		id: string,
		newTitle: string // Реализация функции для обновления заголовка списка.
	) =>
		set(state => ({
			// Функция `set` принимает функцию, которая получает текущее состояние (`state`).
			lists: state.lists.map(
				(
					list // Использует метод `map` для создания нового массива списков.
				) => (list.id === id ? { ...list, title: newTitle } : list) // Для списка с совпадающим `id`, создает новый объект списка с обновленным `title` и остальными свойствами из старого объекта. Для остальных списков возвращает оригинальный объект.
			),
		})),
}))

export const selectListsByBoardId =
	(boardId: string) =>
	(
		state: ListState // Объявляет и экспортирует селектор `selectListsByBoardId`. Он принимает `boardId` и возвращает функцию, которая принимает текущее состояние `ListState`.
	) =>
		state.lists.filter(list => list.boardId === boardId) // Возвращает новый массив списков, отфильтрованный по `boardId`. Оставляются только те списки, у которых `boardId` совпадает с переданным значением.
