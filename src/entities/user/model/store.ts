import { create } from 'zustand'
import { User } from './types'

/**
 * Интерфейс состояния аутентификации.
 * Описывает структуру хранилища и доступные методы.
 */
interface AuthState {
	/**
	 * Текущий авторизованный пользователь.
	 * null - если пользователь не авторизован.
	 */
	user: User | null

	/**
	 * Флаг загрузки состояния аутентификации.
	 * true - когда идет проверка токена/загрузка пользователя.
	 * false - когда проверка завершена.
	 */
	isLoading: boolean

	/**
	 * Устанавливает текущего пользователя.
	 * @param user - объект пользователя или null для выхода из системы
	 */
	setUser: (user: User | null) => void

	/**
	 * Устанавливает состояние загрузки.
	 * @param isLoading - новое значение флага загрузки
	 */
	setLoading: (isLoading: boolean) => void
}

/**
 * Хранилище состояния аутентификации, созданное с помощью Zustand.
 * Содержит:
 * - Текущего пользователя
 * - Флаг загрузки
 * - Методы для обновления состояния
 */
export const useAuthStore = create<AuthState>()(set => ({
	// Начальное состояние:

	// Пользователь изначально не авторизован
	user: null,

	// Флаг загрузки изначално true, так как при старте приложения
	// обычно проверяется токен/сессия
	isLoading: true,

	// Метод для обновления пользователя
	setUser: (user: User | null) =>
		set(state => ({
			...state, // сохраняем текущее состояние
			user, // обновляем только поле user
		})),

	// Метод для обновления флага загрузки
	setLoading: (isLoading: boolean) =>
		set(state => ({
			...state, // сохраняем текущее состояние
			isLoading, // обновляем только поле isLoading
		})),
}))
